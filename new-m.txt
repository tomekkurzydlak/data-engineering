/// Aktualizuje ENV w jobie Cloud Run (merge, bez usuwania istniejących)
pub async fn update_env_vars_merge(
    &self,
    job_name: &str,
    envs: &std::collections::HashMap<String, String>,
) -> Result<()> {
    let token = self.get_token().await?;

    // obierz aktualny job
    let mut job = self.get_job_raw(job_name).await?;

    // Znajdź sekcję containers[0]
    let containers_path = "/template/template/containers";
    let containers = job.pointer_mut(containers_path)
        .cloned()
        .unwrap_or(serde_json::json!([]));

    if !containers.is_array() || containers.as_array().unwrap().is_empty() {
        anyhow::bail!("Job nie ma kontenerów (template.template.containers)");
    }

    let mut cont0 = containers[0].clone();
    let image = cont0.get("image").and_then(|v| v.as_str()).unwrap_or_default().to_string();
    if image.is_empty() {
        anyhow::bail!("Brak pola image w kontenerze[0]");
    }

    //  Aktualny ENV
    let current_env = cont0.get("env").cloned().unwrap_or(serde_json::json!([]));
    let current_vec = current_env.as_array().cloned().unwrap_or_default();

    // Merge ENV
    let merged_env = Self::merge_env(current_vec, envs);

    // Nadpisz env w kontenerze
    cont0.as_object_mut()
        .expect("container[0] ma być obiektem")
        .insert("env".to_string(), serde_json::Value::Array(merged_env));

    // Ustaw z powrotem do job.template.template.containers[0]
    if let Some(template) = job.get_mut("template").and_then(|t| t.get_mut("template")) {
        template.as_object_mut()
            .expect("template.template jest obiektem")
            .insert("containers".to_string(), serde_json::json!([cont0]));
    } else {
        anyhow::bail!("Brak template.template w obiekcie Job");
    }

    // PATCH z pełnym kontenerem
    let url = format!(
        "{}/jobs/{}?updateMask=template.template.containers",
        self.jobs_base(),
        job_name
    );

    let body = serde_json::json!({
        "template": {
            "template": job["template"]["template"].clone()
        }
    });

    let res = self.client
        .patch(&url)
        .bearer_auth(&token)
        .header("Content-Type", "application/json")
        .json(&body)
        .send()
        .await
        .context("błąd PATCH job (merge env vars)")?;

    let status = res.status();
    let text = res.text().await.unwrap_or_default();
    if !status.is_success() {
        anyhow::bail!("PATCH job failed ({}): {}", status, text);
    }

    info!(%job_name, "Zaktualizowano zmienne środowiskowe (merge)");
    Ok(())
}
