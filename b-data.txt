use anyhow::Result;
use async_trait::async_trait;
use serde_json::Value;
use std::any::Any;

#[async_trait]
pub trait ProcessorBackend: Send + Sync + Any {
    async fn dispatch_job(&self, job_name: &str, json_payload: &Value) -> Result<String>;
    async fn ping(&self, job_name: &str) -> Result<()>;
    fn as_any(&self) -> &dyn Any;
}

// umożliwia wywołanie `as_any()` na obiektach typu `Arc<dyn ProcessorBackend>`
impl dyn ProcessorBackend {
    pub fn as_any(&self) -> &dyn Any {
        self
    }
}
